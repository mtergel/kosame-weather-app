[{"/home/sepi0l/kosame-weather-app/src/App.tsx":"1","/home/sepi0l/kosame-weather-app/src/index.tsx":"2","/home/sepi0l/kosame-weather-app/src/components/Card.tsx":"3","/home/sepi0l/kosame-weather-app/src/lib/index.ts":"4","/home/sepi0l/kosame-weather-app/src/reportWebVitals.ts":"5","/home/sepi0l/kosame-weather-app/src/types/weather.ts":"6"},{"size":430,"mtime":1609394952830,"results":"7","hashOfConfig":"8"},{"size":599,"mtime":1609145936950,"results":"9","hashOfConfig":"8"},{"size":10417,"mtime":1609408363950,"results":"10","hashOfConfig":"8"},{"size":1250,"mtime":1609410241900,"results":"11","hashOfConfig":"8"},{"size":425,"mtime":1609144676860,"results":"12","hashOfConfig":"8"},{"size":616,"mtime":1609158512150,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"3w49xc",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/sepi0l/kosame-weather-app/src/App.tsx",[],"/home/sepi0l/kosame-weather-app/src/index.tsx",[],["28","29"],"/home/sepi0l/kosame-weather-app/src/components/Card.tsx",["30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54"],"import {\n  Accordion,\n  AccordionButton,\n  AccordionIcon,\n  AccordionItem,\n  AccordionPanel,\n  Badge,\n  Box,\n  Button,\n  Center,\n  Flex,\n  Heading,\n  Input,\n  Link,\n  Spinner,\n  Text,\n  VStack,\n} from \"@chakra-ui/react\";\nimport { ExternalLinkIcon } from \"@chakra-ui/icons\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { getWeather, weatherMapping } from \"../lib\";\nimport moment from \"moment\";\nimport { Icon } from \"@chakra-ui/react\";\nimport { IoLocationSharp, IoArrowBack } from \"react-icons/io5\";\nimport {\n  CurrentlyDataPoint,\n  DailyDataBlock,\n  HourlyDataBlock,\n  HourlyDataPoint,\n} from \"../types/datapoint\";\nimport debounce from \"lodash/debounce\";\n\ninterface CardProps {}\ninterface DarkSkyType {\n  timezone: string;\n  currently: CurrentlyDataPoint;\n  daily: DailyDataBlock;\n  hourly: HourlyDataBlock;\n}\n\nconst Card: React.FC<CardProps> = () => {\n  const [weather, setWeather] = useState<DarkSkyType | undefined>(undefined);\n  const [loading, setLoading] = useState(false);\n  const [locationEdit, setLocationEdit] = useState(false);\n  const [coords, setCoords] = useState<\n    | {\n        lat: number;\n        long: number;\n      }\n    | undefined\n  >(undefined);\n  const [coordsDraft, setCoordsDraft] = useState<\n    | {\n        lat: number;\n        long: number;\n      }\n    | undefined\n  >(undefined);\n  const toggleEditMode = () => {\n    setLocationEdit((prevState) => !prevState);\n  };\n\n  //eslint-disable-next-line\n  const delayedUpdate = useCallback(\n    debounce(\n      (_coords: { lat: number; long: number }) => setCoords(_coords),\n      300\n    ),\n    []\n  );\n  const handleLatChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCoordsDraft((prevState) => {\n      let oldState = Object.assign({}, prevState);\n      oldState.lat = parseInt(event.target.value);\n      return oldState;\n    });\n    if (coordsDraft) {\n      delayedUpdate(coordsDraft);\n    }\n  };\n  const handleLongChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCoordsDraft((prevState) => {\n      let oldState = Object.assign({}, prevState);\n      oldState.long = parseInt(event.target.value);\n      return oldState;\n    });\n    if (coordsDraft) {\n      delayedUpdate(coordsDraft);\n    }\n  };\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      setCoords({\n        lat: position.coords.latitude,\n        long: position.coords.longitude,\n      });\n      setCoordsDraft({\n        lat: position.coords.latitude,\n        long: position.coords.longitude,\n      });\n    });\n  }, []);\n\n  useEffect(() => {\n    const GetWeather = async () => {\n      setLoading(true);\n\n      try {\n        if (coords) {\n          const res = await getWeather(\n            coords.lat.toString(),\n            coords.long.toString()\n          );\n          setWeather(res);\n        }\n        setLoading(false);\n      } catch (error) {\n        setLoading(false);\n      }\n    };\n    GetWeather();\n  }, [coords]);\n\n  if (loading) {\n    return (\n      <Box width=\"250px\" mt={-1} px={1} height=\"400px\" py={4} color=\"#FFFDFD\">\n        <Center>\n          <Spinner />\n        </Center>\n      </Box>\n    );\n  }\n\n  if (weather) {\n    // Getting temp\n    const getTemps = (data: HourlyDataPoint[]) =>\n      data.map((p) => p.temperature);\n    // Getting max Temp\n    const getMaxTemps = (currentData: HourlyDataPoint[]) =>\n      Math.round(Math.max(...getTemps(currentData)));\n\n    // Getting min Temp\n    const getMinTemps = (currentData: HourlyDataPoint[]) =>\n      Math.round(Math.min(...getTemps(currentData)));\n    console.log(weather);\n    return (\n      <Box\n        width=\"250px\"\n        position=\"relative\"\n        mt={-1}\n        px={1}\n        py={4}\n        color=\"#FFFDFD\"\n        display=\"flex\"\n        flexDir=\"column\"\n      >\n        {/* {locationEdit ? (\n          <VStack>\n            <Button onClick={toggleEditMode}>\n              <Icon as={IoArrowBack} mr={2} />\n              <Text fontSize=\"sm\">Go back</Text>\n            </Button>\n            <Box width=\"100%\" py={2} px={4}>\n              <Heading size=\"sm\" py={1}>\n                Latitude\n              </Heading>\n              <Input\n                value={coordsDraft?.lat}\n                type=\"number\"\n                size=\"sm\"\n                mb={2}\n                onChange={handleLatChange}\n              />\n              <Heading size=\"sm\" py={1}>\n                Longitude\n              </Heading>\n              <Input\n                value={coordsDraft?.long}\n                type=\"number\"\n                size=\"sm\"\n                mb={2}\n                onChange={handleLongChange}\n              />\n            </Box>\n          </VStack>\n        ) : (\n          <VStack flexGrow={1} width=\"100%\">\n            <Button onClick={toggleEditMode}>\n              <Icon as={IoLocationSharp} mr={2} />\n              <Text fontSize=\"sm\">{weather.timezone}</Text>\n            </Button>\n\n            <Center>\n              <Text fontSize=\"sm\">\n                {moment\n                  .unix(weather.currently.time)\n                  .format(\"ddd, MMMM DD, HH:mm\")}\n              </Text>\n            </Center>\n            <Flex\n              display=\"flex\"\n              alignItems=\"center\"\n              justifyContent=\"space-around\"\n              width=\"100%\"\n              py={4}\n            >\n              <Heading\n                size=\"3xl\"\n                display=\"flex\"\n                justifyContent=\"space-around\"\n                alignItems=\"center\"\n                data-icon={weatherMapping(weather.currently.icon)}\n              />\n              <Heading\n                size=\"3xl\"\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                as=\"div\"\n              >\n                {`${Math.round(weather.currently.temperature)}`}\n                <Heading size=\"md\" px={1}>\n                  <Flex\n                    data-icon=\"9\"\n                    justifyContent=\"space-around\"\n                    alignItems=\"center\"\n                  />\n                </Heading>\n              </Heading>\n            </Flex>\n\n            <Text fontSize=\"sm\">{`Feels Like: ${Math.round(\n              weather.currently.apparentTemperature\n            )}˚ Low: ${getMinTemps(weather.hourly.data)}˚ High: ${getMaxTemps(\n              weather.hourly.data\n            )}˚`}</Text>\n\n            <Center>\n              <Text fontSize=\"lg\">{weather.currently.summary}</Text>\n            </Center>\n            <Accordion width=\"100%\" allowToggle pb={4}>\n              <AccordionItem>\n                <AccordionButton>\n                  <Box flex=\"1\" textAlign=\"left\">\n                    Hourly\n                  </Box>\n                  <AccordionIcon />\n                </AccordionButton>\n                <AccordionPanel pb={4}>\n                  {weather.hourly.data\n                    .filter((_ite, _index) => _index % 3 === 1)\n                    .map((item, index) => (\n                      <Flex alignItems=\"center\" key={index}>\n                        <Heading\n                          size=\"xl\"\n                          data-icon={weatherMapping(item.icon)}\n                        />\n                        <Text size=\"sm\" pl={2}>\n                          {moment.unix(item.time).format(\"HH:mm\")}\n                        </Text>\n                        <Badge size=\"sm\" mx={2}>\n                          {Math.round(item.temperature)}˚\n                        </Badge>\n\n                        <Text fontSize=\"xs\">{item.summary}</Text>\n                      </Flex>\n                    ))}\n                </AccordionPanel>\n              </AccordionItem>\n              <AccordionItem>\n                <AccordionButton>\n                  <Box flex=\"1\" textAlign=\"left\">\n                    Weekly\n                  </Box>\n                  <AccordionIcon />\n                </AccordionButton>\n                <AccordionPanel py={2}>\n                  {weather.daily.data.map((item, index) => (\n                    <Flex\n                      alignItems=\"center\"\n                      key={index}\n                      _notLast={{\n                        borderBottom: \"1px solid\",\n                      }}\n                      py={2}\n                      flexDir=\"column\"\n                      flexWrap=\"wrap\"\n                    >\n                      <Flex alignItems=\"center\" width=\"100%\" pb={2}>\n                        <Heading\n                          size=\"3xl\"\n                          data-icon={weatherMapping(item.icon)}\n                        />\n                        <Text size=\"sm\" pl={2}>\n                          {moment.unix(item.time).format(\"ddd, MMMM DD\")}\n                        </Text>\n                      </Flex>\n                      <Flex\n                        alignItems=\"center\"\n                        justifyContent=\"space-around\"\n                        width=\"100%\"\n                        pb={1}\n                      >\n                        <Box>\n                          {moment\n                            .unix(item.temperatureMinTime)\n                            .format(\"h:mm a\")}\n                          <Badge mx={1}>\n                            {Math.round(item.temperatureMin)}˚\n                          </Badge>\n                        </Box>\n                        <Box>\n                          {moment\n                            .unix(item.temperatureMaxTime)\n                            .format(\"h:mm a\")}\n                          <Badge mx={1}>\n                            {Math.round(item.temperatureMax)}˚\n                          </Badge>\n                        </Box>\n                      </Flex>\n                      <Text size=\"sm\" width=\"100%\">\n                        {item.summary}\n                      </Text>\n                    </Flex>\n                  ))}\n                </AccordionPanel>\n              </AccordionItem>\n            </Accordion>\n          </VStack>\n        )}\n\n        <VStack>\n          <Flex justifyContent=\"center\" alignItems=\"center\">\n            <Link\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=\"https://darksky.net/poweredby/\"\n              isExternal\n            >\n              Powered by Dark Sky <ExternalLinkIcon mx=\"2px\" />\n            </Link>\n          </Flex>\n        </VStack> */}\n      </Box>\n    );\n  } else {\n    return null;\n  }\n};\nexport default Card;\n","/home/sepi0l/kosame-weather-app/src/lib/index.ts",[],"/home/sepi0l/kosame-weather-app/src/reportWebVitals.ts",[],"/home/sepi0l/kosame-weather-app/src/types/weather.ts",[],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":2,"column":3,"nodeType":"61","messageId":"62","endLine":2,"endColumn":12},{"ruleId":"59","severity":1,"message":"63","line":3,"column":3,"nodeType":"61","messageId":"62","endLine":3,"endColumn":18},{"ruleId":"59","severity":1,"message":"64","line":4,"column":3,"nodeType":"61","messageId":"62","endLine":4,"endColumn":16},{"ruleId":"59","severity":1,"message":"65","line":5,"column":3,"nodeType":"61","messageId":"62","endLine":5,"endColumn":16},{"ruleId":"59","severity":1,"message":"66","line":6,"column":3,"nodeType":"61","messageId":"62","endLine":6,"endColumn":17},{"ruleId":"59","severity":1,"message":"67","line":7,"column":3,"nodeType":"61","messageId":"62","endLine":7,"endColumn":8},{"ruleId":"59","severity":1,"message":"68","line":9,"column":3,"nodeType":"61","messageId":"62","endLine":9,"endColumn":9},{"ruleId":"59","severity":1,"message":"69","line":11,"column":3,"nodeType":"61","messageId":"62","endLine":11,"endColumn":7},{"ruleId":"59","severity":1,"message":"70","line":12,"column":3,"nodeType":"61","messageId":"62","endLine":12,"endColumn":10},{"ruleId":"59","severity":1,"message":"71","line":13,"column":3,"nodeType":"61","messageId":"62","endLine":13,"endColumn":8},{"ruleId":"59","severity":1,"message":"72","line":14,"column":3,"nodeType":"61","messageId":"62","endLine":14,"endColumn":7},{"ruleId":"59","severity":1,"message":"73","line":16,"column":3,"nodeType":"61","messageId":"62","endLine":16,"endColumn":7},{"ruleId":"59","severity":1,"message":"74","line":17,"column":3,"nodeType":"61","messageId":"62","endLine":17,"endColumn":9},{"ruleId":"59","severity":1,"message":"75","line":19,"column":10,"nodeType":"61","messageId":"62","endLine":19,"endColumn":26},{"ruleId":"59","severity":1,"message":"76","line":21,"column":22,"nodeType":"61","messageId":"62","endLine":21,"endColumn":36},{"ruleId":"59","severity":1,"message":"77","line":22,"column":8,"nodeType":"61","messageId":"62","endLine":22,"endColumn":14},{"ruleId":"59","severity":1,"message":"78","line":23,"column":10,"nodeType":"61","messageId":"62","endLine":23,"endColumn":14},{"ruleId":"59","severity":1,"message":"79","line":24,"column":10,"nodeType":"61","messageId":"62","endLine":24,"endColumn":25},{"ruleId":"59","severity":1,"message":"80","line":24,"column":27,"nodeType":"61","messageId":"62","endLine":24,"endColumn":38},{"ruleId":"59","severity":1,"message":"81","line":44,"column":10,"nodeType":"61","messageId":"62","endLine":44,"endColumn":22},{"ruleId":"59","severity":1,"message":"82","line":59,"column":9,"nodeType":"61","messageId":"62","endLine":59,"endColumn":23},{"ruleId":"59","severity":1,"message":"83","line":71,"column":9,"nodeType":"61","messageId":"62","endLine":71,"endColumn":24},{"ruleId":"59","severity":1,"message":"84","line":81,"column":9,"nodeType":"61","messageId":"62","endLine":81,"endColumn":25},{"ruleId":"59","severity":1,"message":"85","line":140,"column":11,"nodeType":"61","messageId":"62","endLine":140,"endColumn":22},{"ruleId":"59","severity":1,"message":"86","line":144,"column":11,"nodeType":"61","messageId":"62","endLine":144,"endColumn":22},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"@typescript-eslint/no-unused-vars","'Accordion' is defined but never used.","Identifier","unusedVar","'AccordionButton' is defined but never used.","'AccordionIcon' is defined but never used.","'AccordionItem' is defined but never used.","'AccordionPanel' is defined but never used.","'Badge' is defined but never used.","'Button' is defined but never used.","'Flex' is defined but never used.","'Heading' is defined but never used.","'Input' is defined but never used.","'Link' is defined but never used.","'Text' is defined but never used.","'VStack' is defined but never used.","'ExternalLinkIcon' is defined but never used.","'weatherMapping' is defined but never used.","'moment' is defined but never used.","'Icon' is defined but never used.","'IoLocationSharp' is defined but never used.","'IoArrowBack' is defined but never used.","'locationEdit' is assigned a value but never used.","'toggleEditMode' is assigned a value but never used.","'handleLatChange' is assigned a value but never used.","'handleLongChange' is assigned a value but never used.","'getMaxTemps' is assigned a value but never used.","'getMinTemps' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]